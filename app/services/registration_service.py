import uuid

from ..config import settings
from ..datasources.cache.redis import get_redis
from ..datasources.email.email_provider import send_temporary_token_email


class TemporaryTokenNotValid(Exception):
    pass


def temporary_token_generate(
    email: str, ttl_seconds: int = settings.PRE_REGISTRATION_TOKEN_TTL_SECONDS
) -> str:
    """
    Generates a temporary token and stores it in the cache for an email

    Returns:
        Temporary token
    """
    token = uuid.uuid4().hex
    get_redis().set("temporary-token:" + email, token, ex=ttl_seconds)
    return token


def temporary_token_is_valid(email: str, token: str) -> bool:
    """
    Checks whether a temporary token is valid for a given email

    Returns:
        `True` if the token is valid
    """
    return get_redis().get("temporary-token:" + email).decoder() == token


def pre_register_user(email: str) -> str:
    """
    Args:
        email:

    Returns:
        A temporary token that can be used to register a new user.
    """

    token = temporary_token_generate(email)
    send_temporary_token_email(email, token)
    return token


def register_user(email: str, username: str, password: str, token: str) -> str:
    """
    Args:
        email:
        username:
        password:
        token: Temporary token generated by `pre_register_user`

    Returns:
        UUID4 of the registered user
    Raises:
        TemporaryTokenNotValid: if the temporary token is not valid
    """

    if not temporary_token_is_valid(email, token):
        raise TemporaryTokenNotValid()
    # TODO Stores user in the database
    return ""
